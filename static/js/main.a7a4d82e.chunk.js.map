{"version":3,"sources":["services/getUrlWeatherByCity.js","constants/api_url.js","services/transformWeather.js","constants/weathers.js","components/WeatherLocation/Location.js","components/WeatherLocation/WeatherData/WeatherTemperature.js","components/WeatherLocation/WeatherData/WeatherExtraInfo.js","components/WeatherLocation/WeatherData/index.js","components/WeatherLocation/index.js","components/LocationList.js","components/ForecastItem/index.js","services/transformForecast.js","components/ForecastExtended.js","App.js","serviceWorker.js","index.js"],"names":["getUrlWeatherByCity","city","concat","transformWeather","weather_data","kelvin","id","_weather_data$main","main","humidity","temp","speed","wind","weatherState","weather","getWeatherState","temperature","Number","convert","from","to","toFixed","Location","_ref","react_default","a","createElement","className","icons","_icons","Object","defineProperty","WeatherTemperature","icon","react_weathericons_lib_default","name","size","getWeatherIcon","WeatherExtraInfo","WeatherData","_ref$data","data","WeatherData_WeatherTemperature","WeatherData_WeatherExtraInfo","WeatherLocation","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleUpdateClick","api_weather","state","fetch","then","resolve","json","newWeather","setState","prevProps","prevState","onWeatherLocationClick","_this$state","onClick","WeatherLocation_Location","WeatherLocation_WeatherData","CircularProgress","Component","LocationList","cities","onSelectedLocation","map","components_WeatherLocation","key","console","log","handleWeatherLocationClick","strToComponents","ForecastItem","weekDay","hour","transformForecast","list","filter","item","moment","unix","dt","utc","format","api_key","url_base_forecast","ForecastExtended","updateCity","url_forecast","forecastData","nextProps","forecast","components_ForecastItem","renderForecastItemDays","renderProgress","App","handleSelectedLocation","lib","AppBar","position","Toolbar","Typography","varianty","color","xs","md","components_LocationList","Paper","zdepth","components_ForecastExtended","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a7a4d82e.chunk.js","sourcesContent":["// se usan las llaves cuando el exportar no se utiliza la palabra default\r\nimport { url_base_weather, api_key } from '../constants/api_url';\r\n\r\nconst getUrlWeatherByCity = city => {\r\n\r\n return `${url_base_weather}?q=${city}&appid=${api_key}`;\r\n\r\n};\r\n\r\nexport default getUrlWeatherByCity;","\r\n\r\n// configuramos la llamada a la API\r\nexport const api_key = \"8777bca95d8b7777478c6cf735ac551c\";\r\nexport const url_base_weather = \"https://api.openweathermap.org/data/2.5/weather\"\r\n\r\n//export const api_weather = `${url_base_weather}?q=${location}&appid=${api_key}`;\r\n// si quisiereamos los datos en metric y obtener grados centigrados por ejemplo :\r\n// aÃ±adiriamos \"&units=metric\" al final","import convert from 'convert-units';\r\nimport { CLOUD, SUN, RAIN, SNOW, THUNDER, DRIZZLE } from '../constants/weathers';\r\n\r\nconst getTemp = kelvin => {\r\n  return Number(convert(kelvin).from(\"K\").to(\"C\").toFixed(2))\r\n}\r\n\r\nconst getWeatherState = weather => {\r\n  const { id } = weather;\r\n\r\n  if (id < 300) return THUNDER ;\r\n  else if (id < 400) return DRIZZLE ;\r\n  else if (id < 600) return RAIN ;\r\n  else if (id < 700) return SNOW ;\r\n  else if (id === 800) return SUN ;\r\n  else return CLOUD ;\r\n\r\n  \r\n};\r\n\r\n// con getData obtenemos los datos que nos interesan de la peticion a la API en el formato que necesitemos\r\nconst transformWeather = weather_data => {\r\n  const { id } = weather_data;\r\n  const { humidity, temp } = weather_data.main;\r\n  const { speed } = weather_data.wind;\r\n  // le pasamos .weather[0] que es quien contiene el codigo del clima\r\n  const weatherState = getWeatherState(weather_data.weather[0]);\r\n  const temperature = getTemp(temp)\r\n\r\n  const data = {\r\n    id,\r\n    humidity,\r\n    temperature,\r\n    weatherState,\r\n    wind: `${speed} m/s`\r\n  };\r\n\r\n  return data;\r\n};\r\n\r\nexport default transformWeather;","export const CLOUD = \"cloud\";\r\n\r\nexport const SUN = \"sun\";\r\n\r\nexport const RAIN = \"rain\";\r\n\r\nexport const SNOW = \"snow\";\r\n\r\nexport const THUNDER = \"thunder\";\r\n\r\nexport const DRIZZLE = \"drizzle\";\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css';\r\n\r\n\r\nconst Location = ({ city }) => {\r\n  \r\n  return (\r\n    <div className=\"locationCont\" >\r\n      <h1>{city}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nLocation.propTypes = {\r\n  city : PropTypes.string.isRequired\r\n}\r\n\r\nexport default Location;","import React from 'react';\r\nimport WeatherIcons from 'react-weathericons';\r\nimport PropTypes from 'prop-types';\r\nimport { CLOUD, SUN, RAIN, SNOW, THUNDER, DRIZZLE } from '../../../constants/weathers';\r\nimport './styles.css';\r\n\r\nconst icons = {\r\n  [CLOUD]:\"cloud\",\r\n  [SUN]:\"day-sunny\",\r\n  [RAIN]:\"rain\",\r\n  [SNOW]:\"snow\",\r\n  [THUNDER]:\"snow\",\r\n  [DRIZZLE]:\"snow\",\r\n};\r\n\r\nconst getWeatherIcon = weatherState => {\r\n  const icon = icons[weatherState];\r\n  const sizeIcon = \"4x\"\r\n\r\n  if (icon) return <WeatherIcons className=\"wicon\" name={icon} size={sizeIcon}/> ;\r\n  else      return <WeatherIcons className=\"wicon\" name={\"day-sunny\"} size={sizeIcon}/> ;\r\n   \r\n};\r\n\r\nconst WeatherTemperature = ({ temperature, weatherState}) => {\r\n  // signo de grados altgr + shift + 0 (de arriba ,no del bloquenumerico derecho)\r\n  return (\r\n    <div className=\"weatherTemperatureCont\">\r\n      {\r\n        getWeatherIcon(weatherState)\r\n      }\r\n      <span className=\"temperature\" >{`${temperature}`}</span>\r\n      <span className=\"temperatureType\" >{`CÂ°`}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nWeatherTemperature.propTypes = {\r\n  temperature: PropTypes.number.isRequired,\r\n  weatherState: PropTypes.string.isRequired\r\n}\r\n\r\n\r\nexport default WeatherTemperature;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css';\r\n\r\nconst WeatherExtraInfo = ({ humidity, wind }) => {\r\n  return (\r\n    <div className=\"weatherExtraInfoCont\">\r\n      <span className=\"extraInfoText\" >{`Humedad: ${humidity} % `}</span>\r\n      <span className=\"extraInfoText\" >{`Vientos: ${wind}`}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nWeatherExtraInfo.propTypes = {\r\n  humidity: PropTypes.number.isRequired,\r\n  wind: PropTypes.string.isRequired\r\n}\r\n\r\nexport default WeatherExtraInfo;","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport WeatherTemperature from './WeatherTemperature';\r\nimport WeatherExtraInfo from './WeatherExtraInfo';\r\nimport './styles.css';\r\n\r\nconst WeatherData = ({ data: { temperature, weatherState, humidity, wind } }) => {\r\n  return (\r\n    <div className = \"weatherDataCont\">\r\n      <WeatherTemperature \r\n        temperature={temperature} \r\n        weatherState={weatherState}\r\n      />\r\n      <WeatherExtraInfo humidity={humidity} wind={wind}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nWeatherData.propTypes = {\r\n  data: PropTypes.shape({\r\n    temperature: PropTypes.number.isRequired,\r\n    weatherState: PropTypes.string.isRequired,\r\n    humidity: PropTypes.number.isRequired,\r\n    wind: PropTypes.string.isRequired\r\n  })\r\n}\r\n\r\nexport default WeatherData;","import React, { Component } from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { PropTypes } from 'prop-types';\r\nimport getUrlWeatherByCity from '../../services/getUrlWeatherByCity';\r\nimport transformWeather from '../../services/transformWeather';\r\nimport Location from './Location';\r\nimport WeatherData from './WeatherData';\r\nimport './styles.css';\r\n\r\n\r\nclass WeatherLocation extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    const { city } = props;\r\n\r\n    this.state = {\r\n      city,\r\n      data: null,\r\n  \r\n    };\r\n    //console.log(\"constructor\")\r\n  }\r\n\r\n  componentDidMount() {\r\n    //console.log(\"componentDidMount\")\r\n    this.handleUpdateClick();\r\n    \r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    //console.log(\"componentDidUpdate\")\r\n    \r\n\r\n  };\r\n\r\n  // // los siguientes metodos de \"lifecicle\" estan en deprecated y no se aconsejan usar, pero podemos encontrarlos en cualquier proyecto anterior al cambio\r\n  // componentWillMount() {\r\n  //   console.log(\"UNSAFE componentWillMount\")\r\n  // };\r\n\r\n  // componentWillUpdate(nextProps, nextState) {\r\n  //   console.log(\"UNSAFE componentWillUpdate\")\r\n  // }\r\n  \r\n\r\n  handleUpdateClick = () => {\r\n    //usamos fetch para la llamada a la APIÃ§\r\n    const api_weather = getUrlWeatherByCity(this.state.city);\r\n    fetch(api_weather).then( resolve => {\r\n\r\n      \r\n      return resolve.json();\r\n\r\n    }).then(data => {\r\n      const newWeather = transformWeather(data);\r\n      \r\n      this.setState({\r\n        data: newWeather\r\n      })\r\n\r\n    });\r\n  };\r\n\r\n  \r\n\r\n  render() {\r\n    const { onWeatherLocationClick } = this.props\r\n    const { city, data } = this.state\r\n    return (\r\n      <div className=\"weatherLocationCont\" onClick={onWeatherLocationClick} >\r\n        <Location city={city}/>\r\n        { data ? \r\n          <WeatherData data={data}/> : \r\n          <CircularProgress size={50}/> \r\n        }\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nWeatherLocation.propTypes = {\r\n  city: PropTypes.string.isRequired,\r\n  onWeatherLocationClick: PropTypes.func,\r\n}\r\n\r\n\r\n\r\nexport default WeatherLocation;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport WeatherLocation from './WeatherLocation';\r\nimport './styles.css';\r\n\r\n\r\nconst LocationList = ({ cities, onSelectedLocation }) => {\r\n\r\n  const handleWeatherLocationClick = city => {\r\n    console.log(\"handleWeatherLocationClick\");\r\n    onSelectedLocation(city)\r\n  }\r\n\r\n  const strToComponents = cities => (\r\n    \r\n    cities.map( city => {\r\n      return (\r\n        <WeatherLocation  \r\n              key={city} \r\n              city={city} \r\n              onWeatherLocationClick={() => handleWeatherLocationClick(city)} />\r\n\r\n      )\r\n    })\r\n  );\r\n\r\n  return (\r\n    <div className=\"locationList\">\r\n      {strToComponents(cities)}  \r\n    </div>\r\n  )\r\n};\r\n\r\nLocationList.propTypes = {\r\n  cities: PropTypes.array.isRequired,\r\n  onSelectedLocation: PropTypes.func,\r\n}\r\n\r\nexport default LocationList;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport WeatherData from '../WeatherLocation/WeatherData/index';\r\n\r\n\r\nconst ForecastItem = ({weekDay, hour, data}) => {\r\n  return (\r\n    <div>\r\n      <h2>{weekDay} hora: {hour}:00 h</h2>\r\n      <WeatherData data={data}/>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nForecastItem.propTypes = {\r\n  weekDay: PropTypes.string.isRequired,\r\n  hour: PropTypes.number.isRequired,\r\n  data: PropTypes.shape({\r\n    temperature: PropTypes.number.isRequired,\r\n    weatherState: PropTypes.string.isRequired,\r\n    humidity: PropTypes.number.isRequired,\r\n    wind: PropTypes.string.isRequired\r\n  })\r\n}\r\n\r\nexport default ForecastItem ;\r\n","import moment from 'moment';\r\nimport 'moment/locale/es';\r\nimport transformWeather from './transformWeather';\r\n\r\nconst transformForecast = data => (\r\n  data.list.filter( item => (\r\n    //con unix obtenemos la hora de un valor dt dado en unix\r\n    moment.unix(item.dt).utc().hour() === 6 ||\r\n    moment.unix(item.dt).utc().hour() === 12 ||\r\n    moment.unix(item.dt).utc().hour() === 18 \r\n  )).map( item => ({\r\n\r\n    weekDay: moment.unix(item.dt).format('ddd'),\r\n    hour: moment.unix(item.dt).utc().hour(),\r\n    data: transformWeather(item)\r\n\r\n  }))\r\n    \r\n);\r\n  \r\n\r\n\r\nexport default transformForecast;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ForecastItem from './ForecastItem/index';\r\nimport transformForecast from '../services/transformForecast';\r\nimport './styles.css';\r\n\r\n// const days = [\r\n//   'Lunes',\r\n//   'Martes',\r\n//   'Miercoles',\r\n//   'Jueves',\r\n//   'Viernes'\r\n// ]\r\n\r\n// const data = {\r\n//   temperature: 10,\r\n//   humidity: 10,\r\n//   weatherState: \"normal\",\r\n//   wind:\"normal\"\r\n// }\r\n\r\nexport const api_key = \"8777bca95d8b7777478c6cf735ac551c\";\r\nexport const url_base_forecast = \"https://api.openweathermap.org/data/2.5/forecast\"\r\n\r\nclass ForecastExtended extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = { forecastData:null }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateCity(this.props.city)\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if(nextProps.city !== this.props.city) {\r\n      this.setState({ forecast:null })\r\n      this.updateCity(nextProps.city)\r\n    }\r\n  }\r\n\r\n  updateCity = city => {\r\n      //fetch or axios\r\n    //API call:\r\n    //api.openweathermap.org/data/2.5/forecast?q={city name},{country code}&appid={userApiKey}\r\n    const url_forecast = `${url_base_forecast}?q=${city}&appid=${api_key}`;\r\n\r\n    fetch(url_forecast).then(\r\n      data => (data.json())\r\n    ).then(\r\n      weather_data => {\r\n        console.log(weather_data)\r\n        const forecastData = transformForecast(weather_data);\r\n        console.log(forecastData)\r\n        this.setState({ forecastData })\r\n      }\r\n    );\r\n  }\r\n\r\n  renderForecastItemDays(forecastData) {\r\n    return forecastData.map(forecast => (\r\n      <ForecastItem \r\n            key={`${forecast.weekDay}${forecast.hour}`} \r\n            weekDay={forecast.weekDay} \r\n            hour={forecast.hour} \r\n            data={forecast.data} />\r\n    )); \r\n  }\r\n\r\n  renderProgress() {\r\n    return <h3>Cargando pronostico extendido...</h3>\r\n  }\r\n  \r\n  render() {\r\n\r\n    const { city } = this.props\r\n    const { forecastData } = this.state\r\n\r\n    return(\r\n      <div className= 'forecast-title'>\r\n        <h2>{`PronÃ³stico extendido para ${city}`}</h2>\r\n        { forecastData ?\r\n             this.renderForecastItemDays(forecastData)\r\n             : this.renderProgress()\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nForecastExtended.propTypes = {\r\n  city: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default ForecastExtended;\r\n\r\n","import React, { Component } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport { Grid, Col, Row } from 'react-flexbox-grid';\r\nimport LocationList from './components/LocationList';\r\nimport ForecastExtended from './components/ForecastExtended';\r\nimport './App.css';\r\n\r\nconst cities = [\r\n  \"Barcelona,es\",\r\n  \"New York,us\",\r\n  \"Madrid,es\",\r\n  \"London,uk\",\r\n  \"Washington,us\"\r\n];\r\n\r\nclass App extends Component {\r\n  \r\n  constructor() {\r\n    super();\r\n    this.state = { city: null}\r\n  }\r\n\r\n  handleSelectedLocation = city => {\r\n    console.log(`handleSelectedLocation ${city}`)\r\n    // si tenemos en el setstate city:city podemos simplificar y poner solo city\r\n    this.setState({city})\r\n  };\r\n\r\n  render() {\r\n\r\n    const { city } = this.state\r\n\r\n    return (\r\n      <Grid>\r\n        <Row>\r\n          <AppBar position='sticky'>\r\n            <Toolbar className='bar-container'>\r\n              <Typography varianty='title' color='inherit'>\r\n                Weather App\r\n              </Typography>\r\n            </Toolbar>\r\n          </AppBar>\r\n        </Row>\r\n        <Row>\r\n          <Col xs={12} md={6}>\r\n            <LocationList \r\n                cities ={cities} \r\n                onSelectedLocation={this.handleSelectedLocation}\r\n            />\r\n          </Col>\r\n          <Col xs={12} md={6}>\r\n            <Paper zdepth={4}>\r\n              <div className=\"details\">\r\n                { city &&\r\n                    <ForecastExtended city={city}/> \r\n                }\r\n              </div>\r\n            </Paper>\r\n          </Col>\r\n        </Row>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}